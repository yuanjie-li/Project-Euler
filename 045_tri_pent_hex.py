# coding=utf-8
"""

PROBLEM 045 - Triangle, pentagonal, and hexagonal  Numbers

Written by: Yuanjie Li
Date: June 28, 2018

Triangle, pentagonal, and hexagonal numbers are generated by the following
formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

"""
import sys
sys.path.append('../utils')
import utils
import math

# Returns [shape] number for n
def getTri(n):
    return n * (n + 1) / 2
def getPen(n):
    return n * (3 * n - 1) / 2
def getHex(n):
    return n * (2 * n - 1)

# Returns True if x is a pen num
def isPen(x):
    x *= 2
    a = 3
    b = -1
    c = -1 * x
    d = (b**2) - (4*a*c)
    posx = (-b-math.sqrt(d))/(2*a)
    negx = (-b+math.sqrt(d))/(2*a)

    if posx == int(posx) and posx > 0:
        return True
    if negx == int(negx) and negx > 0:
        return True
    return False

# Returns True if x is a hex num
def isHex(x):
    a = 2
    b = -1
    c = -1 * x
    d = (b**2) - (4*a*c)
    posx = (-b-math.sqrt(d))/(2*a)
    negx = (-b+math.sqrt(d))/(2*a)

    if posx == int(posx) and posx > 0:
        return True
    if negx == int(negx) and negx > 0:
        return True
    return False

# Returns True if x is a tri num
def isTri(x):
    x *= 2
    a = 1
    b = 1
    c = -1 * x
    d = (b**2) - (4*a*c)
    posx = (-b-math.sqrt(d))/(2*a)
    negx = (-b+math.sqrt(d))/(2*a)

    if posx == int(posx) and posx > 0:
        return True
    if negx == int(negx) and negx > 0:
        return True
    return False

def main():
    found = False
    index = 144 # Since h143 fits, start here.
    while not found:
        hexn = getHex(index)
        if not isPen(hexn):
            index += 1
            continue
        if isTri(hexn):
            print("Next Triangle number is: %s" % hexn)
            break

if __name__ == "__main__":
    main()

