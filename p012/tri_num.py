#coding=utf-8
"""
Written by: Yuanjie Li
Date: Oct 13, 2017

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

    1:  1
    3:  1,3
    6:  1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?

"""

# Tri Num with 2 divisors
tri = 28
num = 8

def main():
    global num, tri

    # Set up the prime array
    primeArr=[2, 3, 5, 7]
    for i in range(8, 29):
        if(isPrime(i, primeArr)):
            primeArr.append(i)

    num_divs = 4
    # Keep going until you find at least 500 divisors
    while num_divs <= 500:

        # Update the prime array from current tri num to next tri num
        start = tri
        if start % 2 == 0:
            start += 1
        end = tri + num + 1
        for i in xrange(start, end, 2):
            if(isPrime(i, primeArr)):
                primeArr.append(i)

        # Calculate next tri number
        tri += num
        num += 1

        if (isPrime(tri, primeArr)):
            pass
        else:
            # Get the number of divisors
            new_divs = get_divs(tri, primeArr)
            if new_divs > num_divs:
                num_divs = new_divs
                print("Best is now " + str(num_divs))

    print(tri)

# Helper to determine if a number is prime
def isPrime(num, primeArr):
    for prime in primeArr:
      if num % prime == 0:
        return False
      elif num ** 2 >= prime:
          break
    return True

# Get prime factorization, which means duplicates and all that
# Then apply the formula for calculating combinations
def get_divs(num, primeArr):
    div_dic = {}
    for prime in primeArr:
        div_dic[prime] = 0
        while num % prime == 0:
            num /= prime
            div_dic[prime] += 1
        if num < 2:
            break

    total = 1
    for key in div_dic:
        total *= div_dic[key] + 1
    return total

if __name__ == "__main__":
  main()

