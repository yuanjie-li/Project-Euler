#coding=utf-8
"""

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?

"""
PrimeArr=[2, 3, 5, 7]

# Tri Num with 2 divisors
tri = 28
num = 8

def main():
    global num, tri

    num_divs = 5
    # Keep going until you find at least 500 divisors
    while num_divs <= 500:
        # Calculate next tri number
        tri += num
        num += 1

        # Get all primes up to this point
        if (isPrime(tri)):
            pass
        else:
            # Get the number of divisors
            num_divs = get_divs(tri)

    print(tri)

# Helper to determine if a number is prime
def isPrime(Num):
    global PrimeArr
    for Factor in PrimeArr:
      if Num % Factor == 0:
        return False
    PrimeArr.append(Num)
    print(PrimeArr)
    return True

# Get prime factorization, which means duplicates and all that
# Then apply the formula for calculating combinations
def get_divs(i):
    div_dic = {}
    for prime in PrimeArr:
        while i % prime == 0:
            i /= prime
            if prime not in div_dic:
                div_dic[prime] = 1
            else:
                div_dic[prime] += 1
    total = 1
    for key in div_dic:
        print(div_dic)
        total *= div_dic[key] + 1
    print(total)
    return total

if __name__ == "__main__":
  main()

